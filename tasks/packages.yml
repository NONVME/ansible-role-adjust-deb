---
- name: packages | disable apt recommends
  blockinfile:
    path: /etc/apt/apt.conf.d/02norecommends
    mode: 0644
    create: true
    block: |
      APT::Install-Recommends "false";
      APT::Install-Suggests "false";
      APT::Get::Install-Recommends "false";
      APT::Get::Install-Suggests "false";

- name: packages | upgrade all system packages
  apt:
    upgrade: full
    update_cache: true
    cache_valid_time: 3600
    autoclean: true
    autoremove: true
  register: apt_upgrade
  retries: 5
  until: apt_upgrade is success

- name: packages | install common packages
  apt:
    name: "{{ apt_install_packages }}"
    install_recommends: false
    update_cache: true
    cache_valid_time: 3600
    autoclean: true
    autoremove: true
  register: apt_install_common
  retries: 5
  until: apt_install_common is success
  when:
    - apt_install_packages is defined
    - apt_install_packages is iterable
    - apt_install_packages | length > 0

- name: packages | gather installed packages
  package_facts:
    manager: auto

- name: packages | remove packages
  block:
    - name: packages | check if snap is installed
      debug:
        msg: "snapd is installed"
      register: snapd_check
      when:
        - "'snapd' in apt_remove_packages"
        - "'snapd' in ansible_facts.packages"
    - name: packages | remove snap packages
      command: snap remove {{ item }}
      loop:
        - lxd
        - core18
        - core20
        - snapd
      when:
        - "'snapd' in apt_remove_packages"
        - "'snapd' in ansible_facts.packages"
        - snapd_check.failed is defined
    - name: packages | remove packages
      apt:
        name: "{{ apt_remove_packages }}"
        state: absent
        autoremove: true
    - name: packages | remove files
      file:
        state: absent
        path: "{{ item }}"
      loop:
        - "/home/{{ ansible_user }}/.snap"
        - "/snap"
        - "/var/snap"
        - "/var/lib/snapd"
        - "/var/cache/snapd"
        - "/usr/lib/snapd"
        - "/etc/cloud"
        - "/var/lib/cloud"
      when:
        - "'snapd' in apt_remove_packages"
        - "'cloud-init' in apt_remove_packages"
  when:
    - apt_remove_packages is defined
    - apt_remove_packages is iterable
    - apt_remove_packages | length > 0


# Collect the packages installed on the system so we can check against them later
- name: Collect package list
  package_facts:
    manager: auto
  tags:
    - always


- name: Generate a pkgs report
  delegate_to: localhost
  block:
    - name: Create main directory in ssh space
      ansible.builtin.file:
        path: "{{ item.ssh.path | dirname }}"
        mode: 0700
        state: directory
      with_items: "{{ users }}"
      when: item.username is not search(user_app_postfix + '$')
      tags:
        - ssh-keys-generate-directories

    - name: Write package list to a file
      copy:
        dest: "{{ item.ssh.path }} + package_list.txt"
        content: "{{ ansible_facts.packages | to_nice_json }}"
      tags:
        - always

# The sysctl module will set variables in /etc/sysctl.conf and tell sysctl
#  to reload them immediately if 'reload' is set to 'yes'.
- name: 1.5.1 - Ensure address space layout reandomization (ASLR) is enabled
  ansible.posix.sysctl:
    name: kernel.randomize_va_space
    value: "2"
    reload: true
    state: present
    sysctl_set: true
  tags:
    - 1.5.1

# Use system package manager to remove the prelink package
- name: 1.5.2 - Remove prelink package
  ansible.builtin.package:
    name: prelink
    state: absent
  tags:
    - 1.5.2

- name: 1.5.3 - Ensure Apport Error Reporting Service is disabled
  tags:
    - 1.5.3
  block:
    - name: 1.5.3 - Ensure Apport Error Reporting Service is disabled
      ansible.builtin.systemd:
        name: apport.service
        enabled: false
        state: stopped

    - name: 1.5.3 - Ensure that it does not start again
      ansible.builtin.lineinfile:
        dest: "/etc/default/apport"
        regexp: '^\ *enabled\ *=\ *[^0]\b'
        line: "enabled=0"
        state: present

- name: 1.5.4 - Ensure core dumps are restricted
  tags:
    - 1.5.4
  block:
    # The sysctl module will set variables in /etc/sysctl.conf and tell sysctl
    #  to reload them immediately if 'reload' is set to 'yes'.
    - name: 1.5.4 - Ensure core dumps are restricted
      ansible.posix.sysctl:
        name: fs.suid_dumpable
        value: "0"
        state: present
        reload: true

# 1.7 Warning Banners

# Use copy module to copy in the appropriate files based on variable and set permissions
- name: 1.7.1 - Install motd banners
  ansible.builtin.copy:
    src: "{{ motd_file }}"
    dest: /etc/motd
    owner: root
    group: root
    mode: 0644
  when: motd_use is defined and motd_use
  tags:
    - 1.7.1
    - 1.7.4

# Use copy module to copy in the appropriate files based on variable and set permissions
- name: 1.7.2 - Install issue banners
  ansible.builtin.copy:
    src: "{{ issue_file }}"
    dest: /etc/issue
    owner: root
    group: root
    mode: 0644
  when: issue_use is defined and issue_use
  tags:
    - 1.7.2
    - 1.7.5

# Use copy module to copy in the appropriate files based on variable and set permissions
- name: 1.7.3 - Install issue.net banners
  ansible.builtin.copy:
    src: "{{ issue_net_file }}"
    dest: /etc/issue.net
    owner: root
    group: root
    mode: 0644
  when: issue_net_use is defined and issue_net_use
  tags:
    - 1.7.3
    - 1.7.6
